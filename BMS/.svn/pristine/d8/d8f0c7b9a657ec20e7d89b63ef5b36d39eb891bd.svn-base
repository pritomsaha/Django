from django import forms
from django.contrib.auth import authenticate
from .models import User

class UserRegisterForm(forms.ModelForm):
	fullname = forms.CharField(label = 'Full Name', widget = forms.TextInput(attrs = {'class': 'form-control'}))
	username = forms.CharField(label = 'User Name', widget = forms.TextInput(attrs = {'class': 'form-control'}))
	email = forms.EmailField(label = 'Email', widget = forms.TextInput(attrs = {'class': 'form-control'}))
	password = forms.CharField(label = 'Password', min_length = 6, widget = forms.TextInput(attrs = {'class': 'form-control', 'type': 'password'}))
	confirm_password = forms.CharField(label = 'Confirm Password', widget = forms.TextInput(attrs = {'class': 'form-control','type': 'password'}))
	is_active = forms.BooleanField(label = 'Active', initial = True, required = False, widget = forms.TextInput(attrs = {'type': 'checkbox', 'checked': 'checked'}))

	class Meta:
		model = User
		fields = ['fullname','username', 'email', 'password', 'confirm_password', 'is_active']
	
	def clean_confirm_password(self):
		password =  self.cleaned_data.get('password')
		confirm_password = self.cleaned_data.get('confirm_password')
		if password!=confirm_password:
			raise forms.ValidationError("Passwords don't match")
		return confirm_password

	def save(self, commit = True):
		user = super(UserRegisterForm, self).save(commit = False)
		user.set_password(self.cleaned_data['password'])
		if commit:
			user.save()
		return user

class LoginForm(forms.Form):
	username = forms.CharField(label = 'Username or email', widget = forms.TextInput(attrs = {'class': 'form-control'}))
	password = forms.CharField(label = 'Password', widget = forms.TextInput(attrs = {'type': 'password', 'class': 'form-control'}))
	def clean(self):
		username = self.cleaned_data.get('username')
		password = self.cleaned_data.get('password')
		user = authenticate(username = username, password = password)
		if user is None:
			raise forms.ValidationError("Sorry, username or password was invalid. Please try again.")
		return self.cleaned_data

class ChangePasswordForm(forms.Form):
	old_password = forms.CharField(label = 'Old Password', widget = forms.TextInput(attrs = {'type': 'password', 'class': 'form-control'}))
	new_password = forms.CharField(label = 'New Password', min_length = 6, widget = forms.TextInput(attrs = {'type': 'password', 'class': 'form-control'}))
	confirm_password = forms.CharField(label = 'Confirm Password', widget = forms.TextInput(attrs = {'type': 'password', 'class': 'form-control'}))

	def __init__(self, user=None, data=None, *args, **kwargs):
		self.user = user
		super(ChangePasswordForm, self).__init__(data = data, *args, **kwargs)

	def clean_old_password(self):
		old_password = self.cleaned_data.get('old_password')
		if self.user.check_password(old_password)==False:
			raise forms.ValidationError("Old password is incorrect")
		return old_password

	def clean_confirm_password(self):
		new_password =  self.cleaned_data.get('new_password')
		confirm_password = self.cleaned_data.get('confirm_password')
		if new_password!=confirm_password:
			raise forms.ValidationError("Passwords don't match")
		return new_password

	def save(self):
		new_password = self.cleaned_data.get('new_password')
		self.user.set_password(new_password)
		self.user.save()
		return self.user